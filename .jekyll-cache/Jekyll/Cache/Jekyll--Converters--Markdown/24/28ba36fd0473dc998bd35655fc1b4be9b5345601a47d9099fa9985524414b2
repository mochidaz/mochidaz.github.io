I"<p><img src="/images/rustlogo.png" alt="rust" /></p>

<h3 id="pengenalan">Pengenalan</h3>

<p>Bahasa Pemrograman Rust merupakan bahasa yang diciptakan oleh Graydon Hoare pada 2014 lalu. Bahasa berkembang dengan sangat cepat. Rust merupakan bahasa yang menyediakan meomry safety atau keamanan memory tanpa perlu mengalokasikannya secara manual seperti dengan malloc() pada bahasa C. Rust memiliki masa depan yang cerah sebagai sebuah bahasa pemrograman. Bahasa low level yang dapat digunakan untuk embedded system, yang menyediakan memory safety, bagaimana tidak akan populer. Beberapa company mulai menulis ulang project mereka yang awalnya ditulis dalam C++ ke Rust. Firefox juga akan mengganti engine mereka dari Gecko ke engine yang ditulis dalam Rust.</p>

<h3 id="instalasi">Instalasi</h3>

<p>Menginstall rust cukup mudah. Bila anda memakai Linux, anda dapat menginstall rustup dengan pacakge manager anda.</p>

<h4 id="debianubuntu">Debian/Ubuntu</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo apt install rustup
</code></pre></div></div>

<h4 id="red-hatfedoraopensuse">Red Hat/Fedora/OpenSUSE</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo dnf install rustup
</code></pre></div></div>

<h4 id="archmanjaro">Arch/Manjaro</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo pacman -S rustup
</code></pre></div></div>

<h4 id="instalasi-dengan-curl">Instalasi dengan Curl</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh
</code></pre></div></div>

<h4 id="instalasi-dalam-windows">Instalasi dalam Windows</h4>

<p>Untuk instalasi dengan windows, anda dapat melihat instruksi disini.</p>

<p><a href="https://forge.rust-lang.org/infra/other-installation-methods.html">https://forge.rust-lang.org/infra/other-installation-methods.html</a></p>

<h3 id="cargo">Cargo</h3>

<p>Cargo adalah package manager rust sekaligus project manager. Dengan cargo, dependency yang ditulis dalam file khusus bernama Cargo.toml akan diinstall, kemudian program dicompile dan dirun. File executable akan disimpan dalam folder khusus didalamnya. Cargo sudah datang bersama rustup, rustc, dan toolchain lainnya. Bila semua sudah siap, mari kita buat project baru.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cargo new helloworld
</code></pre></div></div>

<p>Dengan command diatas, cargo akan membuat sebuah project bernama helloworld. Anda dapat mengganti nama helloworld dengan apapun sesuai nama project anda. Mari kita lihat struktur project rust.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>â”œâ”€â”€ Cargo.toml
â””â”€â”€ src
    â””â”€â”€ main.rs
</code></pre></div></div>

<p>Sebelum project di-build atau di-run, seperti inilah struktur project rust. <code class="language-plaintext highlighter-rouge">Cargo.toml</code> memuat manifest sebuah project seperti nama project, author, versi, dan edisi. <code class="language-plaintext highlighter-rouge">Cargo.toml</code> jugalah tempat kita menulis dependency project kita. Selanjutnya, <code class="language-plaintext highlighter-rouge">src</code> adalah folder untuk source file. Di dalam folder itulah kita membuat file-file yang akan kita tuliskan source code didalamnya seperti <code class="language-plaintext highlighter-rouge">main.rs</code> yang merupakan main file dimana entry point terletak. Sekarang mari lihat isi file main.rs, yang berisi hello world program secara otomatis.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
    println!("Hello, world!");
}
</code></pre></div></div>

<p>Kira-kira begitulah entry point rust. Namun, kali ini akan membahas tentang cargo terlebih dahulu. Untuk pemrogramannya, akan kita bahas di post berikutnya. Baik, sekarang mari lanjutkan ke command cargo berikutnya.</p>

<p>Untuk build sebuah project dan menginstall dependency yang dibutuhkan secara otomatis, kita harus menjalankan sebuah command cargo, yaitu</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cargo build
</code></pre></div></div>

<p>Dengan menjalankan perintah ini, maka program akan dicompile secara otomatis. Sekarang, mari kita jalankan.</p>

<p>Sudah menjalankan? Sekarang struktur project akan berubah menjadi seperti ini</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>â”œâ”€â”€ Cargo.lock
â”œâ”€â”€ Cargo.toml
â”œâ”€â”€ src
â”‚   â””â”€â”€ main.rs
â””â”€â”€ target
    â”œâ”€â”€ CACHEDIR.TAG
    â””â”€â”€ debug
        â”œâ”€â”€ build
        â”œâ”€â”€ deps
        â”‚   â”œâ”€â”€ helloworld-2b5eaaa0d7f413f8
        â”‚   â””â”€â”€ helloworld-2b5eaaa0d7f413f8.d
        â”œâ”€â”€ examples
        â”œâ”€â”€ helloworld
        â”œâ”€â”€ helloworld.d
        â””â”€â”€ incremental
            â””â”€â”€ helloworld-1wkj4tbmbf4ld
                â”œâ”€â”€ s-fszg58f8sz-1k6u8ve-1oa8bie7cqsss
                â”‚   â”œâ”€â”€ 1dqgm8rogc77u7hp.o
                â”‚   â”œâ”€â”€ 1lbiykn7to4xjn8o.o
                â”‚   â”œâ”€â”€ 1xt5ymq0w7pid6v2.o
                â”‚   â”œâ”€â”€ 2bk3804w6neb0cj4.o
                â”‚   â”œâ”€â”€ 2dsc7rk80ct1rqsz.o
                â”‚   â”œâ”€â”€ 32j4umd5agl7q4ck.o
                â”‚   â”œâ”€â”€ 43kc0tbeopmdjeu9.o
                â”‚   â”œâ”€â”€ dep-graph.bin
                â”‚   â”œâ”€â”€ query-cache.bin
                â”‚   â”œâ”€â”€ work-products.bin
                â”‚   â””â”€â”€ x8t9z996m5lb9b8.o
                â””â”€â”€ s-fszg58f8sz-1k6u8ve.lock
</code></pre></div></div>

<p>File binary terletak dalam <code class="language-plaintext highlighter-rouge">target/debug/helloworld</code> yang dapat dijalankan dengan <code class="language-plaintext highlighter-rouge">target/debug/helloworld</code> bila posisi anda sekarang dalam root directory.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, world!
</code></pre></div></div>

<p>Bila anda ingin langsung menjalankan program tanpa perlu menngeksekusi binary nya secara manual, jalankan lah perintah berikut</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cargo run
</code></pre></div></div>

<p>Perintah ini akan menjalankan program secara langsung, setelah membuild program.</p>

<h3 id="intall-package">Intall Package</h3>

<p>Untuk menginstall sebuah package, umumnya kita harus menuliskan nama package dan versinya di <code class="language-plaintext highlighter-rouge">Cargo.toml</code> dan saat proses build, cargo akan otomatis menginstallnya untuk kita. Contohnya, bila kita menggunakan package scraper pada project kita, maka kita harus menulis scraper di dependencies seperti ini:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[package]
name = "helloworld"
version = "0.1.0"
authors = ["Nama Author &lt;email_author@mail.com&gt;"]
edition = "2018"

[dependencies]
scraper = "0.12.0"

</code></pre></div></div>

<p>Bila anda tidak tahu versi berapa yang terakhir rilis, anda dapat menulisnya dengan <code class="language-plaintext highlighter-rouge">scraper = "*"</code>.</p>

<p>Namun, kita bisa menginstall package cargo secara manual dengan command berikut</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cargo install &lt;nama package&gt;

Misalnya seperti diatas, kita ingin menginstall scraper, maka kita hanya tinggal menjalankan

</code></pre></div></div>
<p>$ cargo install scr
```</p>
:ET