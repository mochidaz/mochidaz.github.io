I"ãn<p><img src="/images/deref.png" alt="deref" /></p>

<p>Sebuah <em>smart pointer</em> adalah sebuah tipe yang mengipmlementasikan trait <code class="language-plaintext highlighter-rouge">Deref</code> dan trait <code class="language-plaintext highlighter-rouge">Drop</code>. Di artikel kali ini, kita akan membahas tentang trait <code class="language-plaintext highlighter-rouge">Deref</code> yang membuat kita dapat memperlakukan sebuah pointer seperti reference biasa. Lalu apa maksud dari memperlakukan sebuah pointer seperti reference biasa?</p>

<p>Sebelum itu, mari kita membahas lebih lanjut tentang <em>Dereferencing</em>.</p>

<h1 id="dereferencing">Dereferencing</h1>

<p>Dereferencing adalah sebuah cara untuk mengakses nilai dari sebuah lokasi memori yang ditunjuk oleh sebuah pointer. Pada Rust, seperti dalam bahasa seperti C++, kita menggunakan operator <code class="language-plaintext highlighter-rouge">*</code> untuk dereferencing.</p>

<p>Sekarang, mari kita lihat kode berikut</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
	<span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
	
	<span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
	<span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Kita menggunakan macro <code class="language-plaintext highlighter-rouge">assert_eq!</code> pada kode diatas untuk mengecek apakah sebuah nilai setara (equal) dengan nilai yang lainnya. Namun, hal yang akan terjadi saat kita compile kode diatas adalah compile error yakni sebagai berikut:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>error[E0277]: can't compare `{integer}` with `&amp;{integer}`
 --&gt; deref.rs:7:2
  |
7 |     assert_eq!(10, b);
  |     ^^^^^^^^^^^^^^^^^ no implementation for `{integer} == &amp;{integer}`
  |
  = help: the trait `PartialEq&lt;&amp;{integer}&gt;` is not implemented for `{integer}`
</code></pre></div></div>

<p>Error diatas menyatakan kalau kita tidak bisa membandingkan sebuah <code class="language-plaintext highlighter-rouge">integer</code> dengan sebuah reference kepada sebuah <code class="language-plaintext highlighter-rouge">integer</code>. Mereka adalah tipe yang berbeda sehingga kita harus menggunakan dereference operator.</p>

<p>Dereference operator menggunakan tanda asterisk (<code class="language-plaintext highlighter-rouge">*</code>)</p>
<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
	<span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
	
	<span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
	<span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="o">*</span><span class="n">b</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Pada Rust, sebuah reference (<code class="language-plaintext highlighter-rouge">&amp;</code>) sebenarnya juga merupakan pointer. Jadi, variabel <code class="language-plaintext highlighter-rouge">b</code> diatas adalah sebuah pointer yang menyimpan alamat memory <code class="language-plaintext highlighter-rouge">a</code> dan menunjuk kepada dimana valuenya, <code class="language-plaintext highlighter-rouge">10</code> disimpan.</p>

<p>Pada <em>assertion</em> pertama, kita membandingkan 10 dan <code class="language-plaintext highlighter-rouge">a</code>, yang hasilnya adalah benar. Pada assertion kedua, kita membandingkan 10 dan <code class="language-plaintext highlighter-rouge">b</code> yang sudah kita dereference sehingga <code class="language-plaintext highlighter-rouge">b</code> disana merupakan <code class="language-plaintext highlighter-rouge">value</code> yang ia tunjuk, yaitu 10. Kode akan berjalan dengan baik.</p>

<h1 id="deref-trait">Deref Trait</h1>

<h2 id="memperlakukan-smart-pointer-seperti-sebuah-reference-biasa">Memperlakukan <em>smart pointer</em> seperti sebuah reference biasa??</h2>

<p>Untuk contoh yang lebih lanjut, kita akan mengganti kode diatas dan menggunakan sebuah <em>smart pointer</em> daripada sebuah reference. Kita akan menggunakan <code class="language-plaintext highlighter-rouge">Box&lt;T&gt;</code>.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
	<span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="nn">Box</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
	
	<span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
	<span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="o">*</span><span class="n">b</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Seperti reference, <code class="language-plaintext highlighter-rouge">Box</code> juga menunjuk kepada nilai yang disimpan di suatu tempat di memori, yang dalam hal ini adalah <code class="language-plaintext highlighter-rouge">10</code>. Perbedaannya disini adalah <code class="language-plaintext highlighter-rouge">b</code> menunjuk pada sebuah copy dari <code class="language-plaintext highlighter-rouge">10</code> karena value tipe primitif akan di-copy, bukan di-move ownershipnya.</p>

<p><code class="language-plaintext highlighter-rouge">Box&lt;T&gt;</code> merupakan sebuah <em>smart pointer</em> yang mengimplementasikan trait <code class="language-plaintext highlighter-rouge">Deref</code>. Inilah yang dimaksud dengan memperlakukan sebuah pointer seperti sebuah reference biasa. Trait <code class="language-plaintext highlighter-rouge">Deref</code> memperbolehkan dereference operator bekerja pada <code class="language-plaintext highlighter-rouge">Box&lt;T&gt;</code> sama seperti ia bekerja pada reference biasa.</p>

<p>Untuk mengerti bagaimana itu bekerja, kita akan mendefinisikan sebuah <em>smart pointer</em> kita sendiri yang akan mengimplementasikan <code class="language-plaintext highlighter-rouge">Deref</code>.</p>

<h2 id="mendefinisikan-smart-pointer-kita-sendiri">Mendefinisikan <em>smart pointer</em> kita sendiri</h2>

<p>Kita akan mendefiniskan sebuah <em>smart pointer</em> yang serupa dengan <code class="language-plaintext highlighter-rouge">Box&lt;T&gt;</code>. Hanya saja, disini kita tidak akan menyimpan nilai pada heap. Disini kita akan berfokus pada dereference operator, bukan dimana lokasi data disimpan.</p>

<p>Sekarang, mari kita langsung definisikan.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Kotak</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>

<span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Kotak</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
	<span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">Self</span> <span class="p">{</span>
		<span class="nf">Self</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Sekarang, kita ganti <code class="language-plaintext highlighter-rouge">Box&lt;T&gt;</code> di fungsi <code class="language-plaintext highlighter-rouge">main</code> dengan <code class="language-plaintext highlighter-rouge">Kotak&lt;T&gt;</code> kita.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
	<span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="nn">Kotak</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
	
	<span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
	<span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="o">*</span><span class="n">b</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Namun pada kode diatas, kita akan mendapatkan error dimana kita tidak bisa melakukan dereference pada tipe <code class="language-plaintext highlighter-rouge">Kotak</code> kita. Sekarang, mari kita implementasikan trait <code class="language-plaintext highlighter-rouge">Deref</code>.</p>

<h2 id="mengimplementasikan-deref-pada-smart-pointer-kita">Mengimplementasikan <code class="language-plaintext highlighter-rouge">Deref</code> pada <em>smart pointer</em> kita</h2>

<p>Pertama-tama. panggil trait <code class="language-plaintext highlighter-rouge">Deref</code> di baris paling atas kode.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">ops</span><span class="p">::</span><span class="n">Deref</span><span class="p">;</span>
</code></pre></div></div>

<p>Lalu kita implementasikan pada <code class="language-plaintext highlighter-rouge">Kotak&lt;T&gt;</code>.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Deref</span> <span class="k">for</span> <span class="n">Kotak</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
	<span class="k">type</span> <span class="n">Target</span> <span class="o">=</span> <span class="n">T</span><span class="p">;</span>
	
	<span class="k">fn</span> <span class="nf">deref</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="o">&amp;</span><span class="nn">Self</span><span class="p">::</span><span class="n">Target</span> <span class="p">{</span>
		<span class="o">&amp;</span><span class="k">self</span><span class="na">.0</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Kalian tidak perlu terlalu mengkhawatirkan <code class="language-plaintext highlighter-rouge">type Target = T</code> untuk sekarang. Itu adalah sebuah <em>associated type</em> yang akan kita bahas di lain waktu. Kalian juga bisa mengganti return type method <code class="language-plaintext highlighter-rouge">deref</code> menjadi hanya <code class="language-plaintext highlighter-rouge">&amp;T</code>.</p>

<p>Trait <code class="language-plaintext highlighter-rouge">Deref</code> mengharuskan kita untuk mengimplementasikan satu method bernama <code class="language-plaintext highlighter-rouge">deref</code> yang menerima <code class="language-plaintext highlighter-rouge">&amp;self</code>, dan mengembalikan sebuah reference kepada <em>inner data</em> atau data didalam struct kita. Ingat, kita disini memakai <em>tuple struct</em> yang menggunakan index <code class="language-plaintext highlighter-rouge">0</code>, <code class="language-plaintext highlighter-rouge">1</code>, dan seterusnya untuk mengambil <em>inner data</em>.</p>

<p>Sekarang, kode kita akan terlihat seperti ini</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">ops</span><span class="p">::</span><span class="n">Deref</span><span class="p">;</span>

<span class="k">struct</span> <span class="n">Kotak</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>

<span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Kotak</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">Self</span> <span class="p">{</span>
        <span class="nf">Self</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Deref</span> <span class="k">for</span> <span class="n">Kotak</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">type</span> <span class="n">Target</span> <span class="o">=</span> <span class="n">T</span><span class="p">;</span>

    <span class="k">fn</span> <span class="nf">deref</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="o">&amp;</span><span class="nn">Self</span><span class="p">::</span><span class="n">Target</span> <span class="p">{</span>
        <span class="o">&amp;</span><span class="k">self</span><span class="na">.0</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="nn">Kotak</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>

    <span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
    <span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="o">*</span><span class="n">b</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Dan assertion kedua kita akan berhasil. Kita akan dapat melakukan dereference pada tipe <code class="language-plaintext highlighter-rouge">Kotak</code> kita. Kode akan dapat kita compile.</p>

<p>Tanpa trait <code class="language-plaintext highlighter-rouge">Deref</code>, compiler hanya mengetahui cara dereference reference saja. Trait <code class="language-plaintext highlighter-rouge">Deref</code> membuat compiler Rust untuk memanggil method <code class="language-plaintext highlighter-rouge">deref</code> untuk semua tipe yang mengimplementasikan trait <code class="language-plaintext highlighter-rouge">Deref</code>untuk mendapatkan sebuah reference kepada sebuah nilai (<code class="language-plaintext highlighter-rouge">Self::Target</code> atau <code class="language-plaintext highlighter-rouge">&amp;T</code> kita diatas), yang si compiler tahu bagaimana cara dereferencenya.</p>

<p>Saat kita menggunakan operator dereference kepada sebuah nilai yang telah mengimplementasikan trait <code class="language-plaintext highlighter-rouge">Deref</code>, assertion kedua kita diatas contohnya, sebenarnya Rust memanggil kode seperti berikut:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="n">b</span><span class="nf">.deref</span><span class="p">()));</span>
</code></pre></div></div>

<p>Rust akan memanggil method <code class="language-plaintext highlighter-rouge">deref</code> terlebih dahulu untuk mendapatkan reference kepada nilai kita, yang pada kasus diatas adalah <code class="language-plaintext highlighter-rouge">10</code>, lalu melakukan dereferencing dengan operator dereference sehingga kira-kira hal yang terjadi adalah berikut:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Kotak(10) -&gt; deref() terpanggil -&gt; &amp;10 -&gt; dereference operator digunakan -&gt; 10
</code></pre></div></div>

<p>Karena Rust melakukan hal itu secara otomatis, kita tidak perlu memikirkan perlu atau tidaknya memanggil method <code class="language-plaintext highlighter-rouge">deref</code> secara eksplisit sehingga kita bisa memperlakukan reference biasa, dan sebuah tipe yang mengimplementasikan trait <code class="language-plaintext highlighter-rouge">Deref</code> dengan sama.</p>

<p>Lalu kenapa method <code class="language-plaintext highlighter-rouge">deref</code> mengembalikan reference kepada suatu nilai bukan nilainya itu sendiri?</p>

<p>Tentunya itu berhubungan dengan ownership pada Rust. Kalau <code class="language-plaintext highlighter-rouge">deref</code> mengembalikan nilainya secara langsung, maka ownership dari nilai tersebut akan di-move keluar dari tipe kita, yang dalam kasus ini, <em>smart pointer</em> kita <code class="language-plaintext highlighter-rouge">Kotak&lt;T&gt;</code>. Dan di banyak kasus saat kita menggunakan operator dereference, kita tidak mau itu terjadi.</p>

<h1 id="deref-coercion"><em>Deref Coercion</em></h1>

<p><em>Deref Coercion</em> adalah sebuah fitur sangat praktis yang Rust akan secara otomatis gunakan pada dan hanya pada tipe yang mengimplementasikan trait <code class="language-plaintext highlighter-rouge">Deref</code> ketika tipe tersebut dijadikan argumen untuk fungsi atau method. <em>Deref Coercion</em> akan mengubah sebuah reference dari satu tipe kepada sebuah reference dari tipe yang berbeda.</p>

<p>Untuk lebih jelasnya, mari kita lanjutkan kode diatas dengan menambahkan sebuah prosedur untuk mencetak <code class="language-plaintext highlighter-rouge">&amp;str</code>.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="nn">Kotak</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>

    <span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
    <span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="o">*</span><span class="n">b</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">prosedur</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">)</span> <span class="p">{</span>
	<span class="nd">println!</span><span class="p">(</span><span class="s">"A adalah: {}"</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Sekarang, kita akan membuat sebuah variabel baru yang menggunakan <em>smart pointer</em> <code class="language-plaintext highlighter-rouge">Kotak&lt;T&gt;</code> kita dan sebuah <code class="language-plaintext highlighter-rouge">String</code> untuk nilai didalam <code class="language-plaintext highlighter-rouge">Kotak&lt;T&gt;</code> kita, lalu kita panggil prosedur kita dengan variabel tersebut sebagai argumen.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="nn">Kotak</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>

    <span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
    <span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="o">*</span><span class="n">b</span><span class="p">);</span>
    
    <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="nn">Kotak</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"Hai"</span><span class="p">));</span>
    <span class="nf">prosedur</span><span class="p">(</span><span class="o">&amp;</span><span class="n">c</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">prosedur</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">)</span> <span class="p">{</span>
	<span class="nd">println!</span><span class="p">(</span><span class="s">"A adalah: {}"</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Seperti yang kalian lihat, prosedur <code class="language-plaintext highlighter-rouge">prosedur</code> menerima <code class="language-plaintext highlighter-rouge">&amp;str</code> sebagai argumen. Diatas, kita memberikannya sebuah reference kepada <code class="language-plaintext highlighter-rouge">Kotak&lt;T&gt;</code> yang memiliki <code class="language-plaintext highlighter-rouge">String</code> didalamnya. Namun, kode diatas TIDAK AKAN error! Kode diatas akan berjalan dengan sempurna.</p>

<p>Apa yang terjadi disini?</p>

<p>Inilah yang terjadi:</p>

<p>Saat kita memakai operator reference di argumen <code class="language-plaintext highlighter-rouge">prosedur</code> pada variabel <code class="language-plaintext highlighter-rouge">c</code>, method <code class="language-plaintext highlighter-rouge">deref</code> akan terpanggil dan kita akan mendapatkan sebuah reference kepada <code class="language-plaintext highlighter-rouge">String</code>, nilai yang kita wrap dalam <code class="language-plaintext highlighter-rouge">Kotak&lt;T&gt;</code>.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&amp;</span><span class="n">Kotak</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span> <span class="k">-&gt;</span> <span class="o">&amp;</span><span class="nb">String</span>
</code></pre></div></div>

<p>Lalu, <code class="language-plaintext highlighter-rouge">String</code> juga mengimplementasikan trait <code class="language-plaintext highlighter-rouge">Deref</code>. Bila kita memanggil <code class="language-plaintext highlighter-rouge">deref</code>, <code class="language-plaintext highlighter-rouge">String</code> akan mengembalikan sebuah <code class="language-plaintext highlighter-rouge">&amp;str</code> sehingga hal yang akan terjadi berikutnya adalah:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&amp;</span><span class="n">Kotak</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span> <span class="k">-&gt;</span> <span class="o">&amp;</span><span class="nb">String</span> <span class="k">-&gt;</span> <span class="o">&amp;</span><span class="nb">str</span>
</code></pre></div></div>

<p>Rust melakukannya dengan otomatis. Tanpa <em>Deref Coercion</em>, bila ingin melakukan hal seperti diatas, kita harus menuliskannya seperti ini:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">prosedur</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="o">*</span><span class="n">c</span><span class="p">)[</span><span class="o">..</span><span class="p">]);</span>
</code></pre></div></div>

<p>Disana kita melakukan dereference pada <code class="language-plaintext highlighter-rouge">c</code> sehingga kita mendapat sebuah <code class="language-plaintext highlighter-rouge">String</code>, kemudian <code class="language-plaintext highlighter-rouge">&amp;</code> dan <code class="language-plaintext highlighter-rouge">[..]</code> (slice yang berisi operator <code class="language-plaintext highlighter-rouge">RangeFull</code>) akan membuat sebuah <code class="language-plaintext highlighter-rouge">&amp;str</code> dari si <code class="language-plaintext highlighter-rouge">String</code> yang setara dengan panjang penuh (full range) si <code class="language-plaintext highlighter-rouge">String</code>. Sangat merepotkan bukan? Kode akan lebih sulit ditulis dan lebih sulit dibaca. Terima kasih <em>Deref Coercion</em>!</p>

<p>Untuk mutable reference, kita harus menggunakan trait <code class="language-plaintext highlighter-rouge">DerefMut</code>.</p>

<p>Rust melakukan <em>Deref Coercion</em> bila ia bertemu tipe dan implementasi trait dalam tiga kasus:</p>

<ul>
  <li>Dari <code class="language-plaintext highlighter-rouge">&amp;T</code> ke <code class="language-plaintext highlighter-rouge">&amp;U</code> ketika <code class="language-plaintext highlighter-rouge">T: Deref&lt;Target=U&gt;</code></li>
  <li>Dari <code class="language-plaintext highlighter-rouge">&amp;mut T</code> ke <code class="language-plaintext highlighter-rouge">&amp;mut U</code> ketika <code class="language-plaintext highlighter-rouge">T: DerefMut&lt;Target=U&gt;</code></li>
  <li>Dari <code class="language-plaintext highlighter-rouge">&amp;mut T</code> ke <code class="language-plaintext highlighter-rouge">&amp;U</code> ketika <code class="language-plaintext highlighter-rouge">T: Deref&lt;Target=U&gt;</code></li>
</ul>

<p>Terima Kasih telah membaca, sampai bertemu di artikel selanjutnya! :)</p>

:ET