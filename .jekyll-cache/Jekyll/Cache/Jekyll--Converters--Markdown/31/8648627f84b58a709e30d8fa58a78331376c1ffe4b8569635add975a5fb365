I"3
<p>Error handling merupakan salah satu logika penting dalam pemrograman. Error handling merupakan cara untuk memproses suatu logika disaat logika yang lainnya mengalami <code class="language-plaintext highlighter-rouge">error</code> atau kegagalan. Error handling dapat juga disebut dengan <code class="language-plaintext highlighter-rouge">exception handling</code>. 
Umumnya, bahasa pemrograman lain memakai sebuah logika bernama <code class="language-plaintext highlighter-rouge">try-catch</code> untuk melakukan exception handling dimana <code class="language-plaintext highlighter-rouge">try</code> mencoba untuk menjalankan suatu logika yang berpotensi untuk error, dan <code class="language-plaintext highlighter-rouge">catch</code> merupakan logika yang menangkap error tersebut, lalu menjalankan logika lainnya bila error yang ditangkap sesuai. 
Rust tidak menggunakan <code class="language-plaintext highlighter-rouge">try-catch</code>. Rust menggunakan sebuah <code class="language-plaintext highlighter-rouge">enum</code> bernama <code class="language-plaintext highlighter-rouge">Result&lt;T, E&gt;</code> dimana T merupakan generic untuk tipe data yang akan di-<code class="language-plaintext highlighter-rouge">wrap</code> dalam bentuk <code class="language-plaintext highlighter-rouge">Ok(T)</code> dan E merupakan generic untuk tipe data bentuk error yang akan di-<code class="language-plaintext highlighter-rouge">wrap</code> dalam bentuk <code class="language-plaintext highlighter-rouge">Err(E)</code>. Yang kedua adalah <code class="language-plaintext highlighter-rouge">null</code>. 
Bahasa pemrograman lain umumnya memiliki <code class="language-plaintext highlighter-rouge">null</code> atau nilai kosong yang benar-benar kosong (Bukan 0, karena 0 merupakan integer). Namun <code class="language-plaintext highlighter-rouge">null reference</code> dianggap sebagai sesuatu yang buruk dalam Computer Science. Oleh karena itu, Rust tidak memiliki <code class="language-plaintext highlighter-rouge">null</code>, melainkan sebuah <code class="language-plaintext highlighter-rouge">enum</code> bernama <code class="language-plaintext highlighter-rouge">Option</code>. <code class="language-plaintext highlighter-rouge">enum</code> ini digunakan untuk sesuatu yang memiliki kemungkinan tidak ada atau <code class="language-plaintext highlighter-rouge">None</code>. 
<code class="language-plaintext highlighter-rouge">enum</code> ini akan mengembalikan <code class="language-plaintext highlighter-rouge">Some(value)</code> atau <code class="language-plaintext highlighter-rouge">None</code>.</p>
:ET