I"»<p><img src="/images/rust-9.png" alt="rust" /></p>

<p>Saya sudah pernah menjelaskan tentang generics pada <a href="https://mochidaz.github.io/id/Bahasa-Rust-5">Bab Result, Option, dan Pattern Matching</a>. Dengan generics, kita dapat menuliskan tipe data abstrak dengan <em>placeholder types</em> untuk struct, enum, dan juga fungsi. Kita menggunakan <em>placeholder types</em> daripada mendefinisikan tipe datanya secara eksplisit. Kita dapat menuliskan kode yang bekerja untuk tipe-tipe data yang berbeda sehingga menambah fleksibilitas kode kita. Dengan generics, kita dapat mengurangi duplikasi kode. Ingat bahwa generics tidak memiliki <em>runtime cost</em> - Generics dibuat saat <em>compile time</em> sehingga performa <em>runtime</em> akan tetap sama, dengan saat anda tidak menggunakan generics. Mari kita langsung masuk ke masalah pertama!</p>

<p>Sekarang saya akan membuat sebuah struct bernama <code class="language-plaintext highlighter-rouge">Apalah</code> yang berisi field <code class="language-plaintext highlighter-rouge">x</code> dan <code class="language-plaintext highlighter-rouge">y</code> yang keduanya memiliki tipe <code class="language-plaintext highlighter-rouge">i32</code>.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Apalah</span> <span class="p">{</span>
	<span class="n">x</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span>
	<span class="n">y</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Nah, sekarang saya akan coba mencetak kedua field tersebut.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="n">Apalah</span> <span class="p">{</span>
		<span class="n">x</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
		<span class="n">y</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
	<span class="p">};</span>
	
	<span class="nd">println!</span><span class="p">(</span><span class="s">"x = {}, y = {}"</span><span class="p">,</span> <span class="n">a</span><span class="py">.x</span><span class="p">,</span> <span class="n">a</span><span class="py">.y</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Kode tersebut akan berjalan dengan baik dan akan mencetak kedua field yang bertipe <code class="language-plaintext highlighter-rouge">i32</code> tersebut. Namun bagaimana bila kita ingin mengisi struct tersebut dengan <code class="language-plaintext highlighter-rouge">f64</code> misalnya? Tentunya kita tidak boleh melakukan ini:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Apalah</span> <span class="p">{</span>
	<span class="n">x</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span>
	<span class="n">y</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">Apalah</span> <span class="p">{</span>
	<span class="n">x</span><span class="p">:</span> <span class="nb">f64</span><span class="p">,</span>
	<span class="n">y</span><span class="p">:</span> <span class="nb">f64</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Sehingga kita akan terpaksa menggunakan nama yang berbeda untuk dua struct yang sama dan hanya dibedakan oleh tipe field.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">ApalahI32</span> <span class="p">{</span>
	<span class="n">x</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span>
	<span class="n">y</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">ApalahF64</span> <span class="p">{</span>
	<span class="n">x</span><span class="p">:</span> <span class="nb">f64</span><span class="p">,</span>
	<span class="n">y</span><span class="p">:</span> <span class="nb">f64</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Terjadi duplikasi kode disini. Kita membuat dua struct sama yang hanya berbeda pada tipe, dengan nama yang berbeda. Karena inilah solusi yang membuat kode lebih fleksibel - generics diperlukan!</p>

<p>Mari kita hapus kedua struct diatas dan mendefinisikan struct <code class="language-plaintext highlighter-rouge">Apalah</code> lagi, namun kali ini berbeda.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Apalah</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
	<span class="n">x</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span>
	<span class="n">y</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Nah, seperti yang kalian tahu, <code class="language-plaintext highlighter-rouge">T</code> merupakan tipe <em>placeholder</em> yang dapat diganti dengan tipe data apapun - compiler yang akan mengurusnya. Dengan <code class="language-plaintext highlighter-rouge">T</code>, kita akan dapat menggunakan struct <code class="language-plaintext highlighter-rouge">Apalah</code> untuk tipe data yang berbeda-beda. Mari kita coba.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="n">Apalah</span> <span class="p">{</span>
		<span class="n">x</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
		<span class="n">y</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>	
	<span class="p">};</span>
	
	<span class="nd">println!</span><span class="p">(</span><span class="s">"x = {}, y = {}"</span><span class="p">,</span> <span class="n">a</span><span class="py">.x</span><span class="p">,</span> <span class="n">a</span><span class="py">.y</span><span class="p">);</span>
	
	<span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="n">Apalah</span> <span class="p">{</span>
		<span class="n">x</span><span class="p">:</span> <span class="mf">10.5</span><span class="p">,</span>
		<span class="n">y</span><span class="p">:</span> <span class="mf">15.77</span><span class="p">,</span>	
	<span class="p">};</span>
	
	<span class="nd">println!</span><span class="p">(</span><span class="s">"x = {}, y = {}"</span><span class="p">,</span> <span class="n">b</span><span class="py">.x</span><span class="p">,</span> <span class="n">b</span><span class="py">.y</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Daaaan kode akan tercompile dengan baik.</p>

<p>Apa yang terjadi disini? Disini, compiler akan secara otomatis mengisi tipe <code class="language-plaintext highlighter-rouge">T</code> dengan <code class="language-plaintext highlighter-rouge">i32</code> disaat kita menggunakan tipe <code class="language-plaintext highlighter-rouge">i32</code> saat kita membuat variabel bilangan bulat dari struct tersebut, dan juga <code class="language-plaintext highlighter-rouge">f64</code> bila kita menggunakan desimal! Terima kasih, compiler. Namun, bila kita ingin menggunakan <code class="language-plaintext highlighter-rouge">f32</code> untuk float misalnya, dan bukan <code class="language-plaintext highlighter-rouge">f64</code>, kita juga dapat mendefinisikan tipe data kita secara eksplisit pada saat pendeklarasian ataupun assignment seperti ini:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let b: Apalah&lt;f32&gt; = Apalah {
	x: 10.5,
	y: 15.77,	
};
</code></pre></div></div>
<p>Sangat berguna, bukan?</p>

<p>Lalu, kenapa kita menggunakan <code class="language-plaintext highlighter-rouge">T</code>? Dan bukan huruf lain? Sebenarnya, <code class="language-plaintext highlighter-rouge">T</code> hanyalah sebuah <em>placeholder</em>. Seperti sebuah identifier variabel, kalian bisa mengganti <code class="language-plaintext highlighter-rouge">T</code> dengan apapun sesuka kalian. Namun, <code class="language-plaintext highlighter-rouge">T</code> merupakan <em>naming convention</em> yang baik untuk generics. <code class="language-plaintext highlighter-rouge">T</code> merupakan kependekan dari <em>Type</em> atau tipe. Biasanya, <em>naming convention</em> untuk generics setelah <code class="language-plaintext highlighter-rouge">T</code> dilanjutkan dengan huruf sesudah <code class="language-plaintext highlighter-rouge">T</code> yaitu <code class="language-plaintext highlighter-rouge">U</code>. Namun tentu saja penamaan itu relatif.</p>

<p>Menuliskan dua tipe generic berbeda sangat mudah. Hanya tinggal menambah satu huruf yang berbeda seperti ini:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Apalah</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">U</span><span class="o">&gt;</span> <span class="p">{</span>
	<span class="n">x</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span>
	<span class="n">y</span><span class="p">:</span> <span class="n">U</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Dan sekarang kita dapat membuat sebuah struct dengan dua tipe generic yang berbeda seperti ini:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="n">Apalah</span> <span class="p">{</span>
	<span class="n">x</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
	<span class="n">y</span><span class="p">:</span> <span class="mf">15.8</span><span class="p">,</span>	
<span class="p">};</span>
</code></pre></div></div>
<p>Atau tentu saja misalnya</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">a</span><span class="p">:</span> <span class="n">Apalah</span><span class="o">&lt;</span><span class="nb">i32</span><span class="p">,</span> <span class="nb">f32</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Apalah</span> <span class="p">{</span>
	<span class="n">x</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
	<span class="n">y</span><span class="p">:</span> <span class="mf">15.8</span><span class="p">,</span>	
<span class="p">};</span>
</code></pre></div></div>

<p>Generics juga berlaku untuk enumerasi. Mari sekarang kita bersihkan dan hapus struct <code class="language-plaintext highlighter-rouge">Apalah</code> kita, dan semua yang ada didalam fungsi <code class="language-plaintext highlighter-rouge">main</code> dan membuat sebuah enum generic baru.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">enum</span> <span class="n">EnumApalah</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
	<span class="nf">OpsiA</span><span class="p">(</span><span class="n">T</span><span class="p">),</span>
	<span class="nf">OpsiB</span><span class="p">(</span><span class="n">T</span><span class="p">),</span>
	<span class="n">OpsiC</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Kemudian kita gunakan pattern matching.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">let</span> <span class="n">apalah</span> <span class="o">=</span> <span class="nn">EnumApalah</span><span class="p">::</span><span class="nf">OpsiA</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
	<span class="k">let</span> <span class="n">apalah2</span> <span class="o">=</span> <span class="nn">EnumApalah</span><span class="p">::</span><span class="nf">OpsiB</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]);</span>
	
	<span class="k">match</span> <span class="n">apalah</span> <span class="p">{</span>
		<span class="nn">EnumApalah</span><span class="p">::</span><span class="nf">OpsiA</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
			<span class="nd">println!</span><span class="p">(</span><span class="s">"OpsiA memiliki {}"</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="nn">EnumApalah</span><span class="p">::</span><span class="nf">OpsiB</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
			<span class="nd">println!</span><span class="p">(</span><span class="s">"OpsiB memiliki {}"</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="nn">EnumApalah</span><span class="p">::</span><span class="n">OpsiC</span> <span class="k">=&gt;</span> <span class="p">{</span>
			<span class="nd">println!</span><span class="p">(</span><span class="s">"OpsiC tidak ada apa-apa"</span><span class="p">);</span>
		<span class="p">}</span>
 	<span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Dan tentu saja, generic juga bekerja pada tipe yang berupa struct, seperti <code class="language-plaintext highlighter-rouge">apalah2</code> diatas yang memuat <code class="language-plaintext highlighter-rouge">Vec</code> atau vektor.</p>

<p>Sekarang kita akan masuk ke fungsi generic. Silahkan untuk clear atau hapus enum yang telah kita buat, dan juga semua yang ada didalam fungsi <code class="language-plaintext highlighter-rouge">main</code>.</p>

<p>Pembuatan fungsi generic juga mirip dengan struct, yaitu sebagai berikut:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="n">fungsi_apalah</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
	<span class="n">a</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Diatas, kita memakai <code class="language-plaintext highlighter-rouge">T</code> sebagai tipe untuk a dan b, dan juga return typenya. Ini hanyalah sebuah contoh membosankan untuk generic pada fungsi.</p>

<p>Kedua tipe pada parameter fungsi diatas adalah <code class="language-plaintext highlighter-rouge">T</code> sehingga bila kita memasukkan tipe <code class="language-plaintext highlighter-rouge">i32</code> misalnya pada parameter <code class="language-plaintext highlighter-rouge">a</code>, namun memasukkan tipe <code class="language-plaintext highlighter-rouge">f32</code> pada parameter <code class="language-plaintext highlighter-rouge">b</code>, maka akan terjadi error.</p>

<p>Sekarang, mari kita masuk pada bagian yang tidak membosankan dan juga bagian menarik utamanya: Trait bounds.</p>

<p>Generics pada Rust adalah trait-based generics yang berarti limitasi atau apa yang bisa kita lakukan dengan generics didasarkan pada traits yang dibatasi olehnya. Bingung? Mari kita lihat sebuah contoh.</p>

<p>Kita ganti <code class="language-plaintext highlighter-rouge">fungsi_apalah</code> menjadi seperti ini:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="n">fungsi_apalah</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
	<span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Kira-kira apa yang akan terjadi? Akan terjadi error! Kalau anda memakai <code class="language-plaintext highlighter-rouge">template</code> pada bahasa C++, maka anda akan langsung bisa menambahkan kedua parameter diatas. Namun, tidak dengan Rust. Generics pada Rust dibatasi, atau diikat oleh trait. Dengan kata lain, kita harus menggunakan trait untuk melakukan operasi tertentu untuk tipe yang ingin kita input.</p>

<p>Untuk pertambahan, Rust menyediakan sebuah trait builtin yaitu <code class="language-plaintext highlighter-rouge">std::ops::Add</code>. Mari kita tambahkan!</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="n">fungsi_apalah</span><span class="o">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="nn">std</span><span class="p">::</span><span class="nn">ops</span><span class="p">::</span><span class="nb">Add</span><span class="o">&lt;</span><span class="n">Output</span><span class="o">=</span><span class="n">T</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
	<span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Nah, sekarang mari kita tes.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="nf">fungsi_apalah</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
	<span class="nd">println!</span><span class="p">(</span><span class="s">"Hasilnya adalah: {}"</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Dan jreng! Sekarang parameter <code class="language-plaintext highlighter-rouge">a</code> akan dapat ditambahkan dengan parameter <code class="language-plaintext highlighter-rouge">b</code> dan kita akan mendapat output <code class="language-plaintext highlighter-rouge">Hasilnya adalah: 30</code>!</p>

<p>Sekarang saya akan menjelaskan tentang trait <code class="language-plaintext highlighter-rouge">Add</code> diatas. Jadi, untuk menggunakan generics pada Rust untuk suatu tipe, tipe yang akan digunakan harus mengimplementasi trait khusus, dan kemudian kita akan menggunakan trait yang diimplementasi oleh tipe tersebut dalam fungsi kita.</p>

<p>Contohnya, tipe seperti <code class="language-plaintext highlighter-rouge">i32</code>, <code class="language-plaintext highlighter-rouge">f32</code>, dan sebagainya telah mengimplementasi trait <code class="language-plaintext highlighter-rouge">Add</code> sehingga kita dapat menggunakannya pada fungsi generic tersebut. Namun, apa yang akan terjadi bila kita memasukkan tipe yang tidak mengimplementasi <code class="language-plaintext highlighter-rouge">Add</code> seperti string slice, misalnya? Tentu saja akan terjadi error! Lebih tepatnya seperti ini: <code class="language-plaintext highlighter-rouge">help: the trait </code>Add<code class="language-plaintext highlighter-rouge"> is not implemented for </code>&amp;str<code class="language-plaintext highlighter-rouge"> </code> yang berarti trait <code class="language-plaintext highlighter-rouge">Add</code> tidak diimplementasikan untuk <code class="language-plaintext highlighter-rouge">&amp;str</code>.</p>

<p>Trait yang digunakan seperti diatas dinamakan juga dengan <em>constraint</em>.</p>

<p>Sudah jelaskan? Lalu apa fungsi dari <code class="language-plaintext highlighter-rouge">&lt;Output=T&gt;</code>? Itu untuk memberitahu Rust bahwa output dari fungsi tersebut adalah <code class="language-plaintext highlighter-rouge">T</code>, bukan yang lain. Lalu mengapa ini dibutuhkan? Karena bisa saja saat kita menambahkan kedua tipe yang sama, misalnya <code class="language-plaintext highlighter-rouge">T + T</code>, pertambahan tersebut berujung kepada hasil yang memiliki tipe yang berbeda, misalnya <code class="language-plaintext highlighter-rouge">U</code> atau <code class="language-plaintext highlighter-rouge">T + U</code> = <code class="language-plaintext highlighter-rouge">V</code>. Karena itu, kita harus mendefinisikan tipe <code class="language-plaintext highlighter-rouge">Output</code> kita.</p>

<p>Sekarang, bagaimana kalau kita juga ingin memakai operator pengurangan pada fungsi kita? Simpel, kita tambahkan <em>constraint</em> lainnya dengan operator <code class="language-plaintext highlighter-rouge">+</code>. Trait untuk pengurangan adalah <code class="language-plaintext highlighter-rouge">std::ops::Sub</code>.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="n">fungsi_apalah</span><span class="o">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="nn">std</span><span class="p">::</span><span class="nn">ops</span><span class="p">::</span><span class="nb">Add</span><span class="o">&lt;</span><span class="n">Output</span><span class="o">=</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">+</span> <span class="nn">std</span><span class="p">::</span><span class="nn">ops</span><span class="p">::</span><span class="nb">Sub</span><span class="o">&lt;</span><span class="n">Output</span><span class="o">=</span><span class="n">T</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
	<span class="n">a</span> <span class="o">-</span> <span class="n">b</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Dan sekarang kita bisa melakukan pengurangan dalam fungsi generic kita.</p>

<p>Sekarang, kita akan menambahkan <code class="language-plaintext highlighter-rouge">std::fmt::Debug</code> agar kita dapat menggunakan <code class="language-plaintext highlighter-rouge">println!</code> dalam fungsi kita.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="n">fungsi_apalah</span><span class="o">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="nn">std</span><span class="p">::</span><span class="nn">ops</span><span class="p">::</span><span class="nb">Add</span><span class="o">&lt;</span><span class="n">Output</span><span class="o">=</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">+</span> <span class="nn">std</span><span class="p">::</span><span class="nn">ops</span><span class="p">::</span><span class="nb">Sub</span><span class="o">&lt;</span><span class="n">Output</span><span class="o">=</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">+</span> <span class="nn">std</span><span class="p">::</span><span class="nn">fmt</span><span class="p">::</span><span class="n">Debug</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
	<span class="nd">println!</span><span class="p">(</span><span class="s">"a memiliki: {:?}"</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
	<span class="n">a</span> <span class="o">-</span> <span class="n">b</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Namunâ¦ <em>constraint</em> kita sekarang terlihat sangat berantakan. Oleh karena itu, Rust menyediakan alternatif lain yang berupa keyword <code class="language-plaintext highlighter-rouge">where</code>.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="n">fungsi_apalah</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">T</span> 
<span class="k">where</span> <span class="n">T</span><span class="p">:</span> <span class="nn">std</span><span class="p">::</span><span class="nn">ops</span><span class="p">::</span><span class="nb">Add</span><span class="o">&lt;</span><span class="n">Output</span><span class="o">=</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">+</span> <span class="nn">std</span><span class="p">::</span><span class="nn">ops</span><span class="p">::</span><span class="nb">Sub</span><span class="o">&lt;</span><span class="n">Output</span><span class="o">=</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">+</span> <span class="nn">std</span><span class="p">::</span><span class="nn">fmt</span><span class="p">::</span><span class="n">Debug</span> <span class="p">{</span>
	<span class="nd">println!</span><span class="p">(</span><span class="s">"a memiliki: {:?}"</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
	<span class="n">a</span> <span class="o">-</span> <span class="n">b</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Nah, kode kita sekarang terlihat lebih <em>readable</em>. Dan sekarang, kita akan menambah satu parameter lain yang bertipe berbeda. <code class="language-plaintext highlighter-rouge">U</code> misalnya lalu menambah <em>constraint</em> <code class="language-plaintext highlighter-rouge">Debug</code>.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="n">fungsi_apalah</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">U</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">c</span><span class="p">:</span> <span class="n">U</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">T</span> 
<span class="k">where</span> <span class="n">T</span><span class="p">:</span> <span class="nn">std</span><span class="p">::</span><span class="nn">ops</span><span class="p">::</span><span class="nb">Add</span><span class="o">&lt;</span><span class="n">Output</span><span class="o">=</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">+</span> <span class="nn">std</span><span class="p">::</span><span class="nn">ops</span><span class="p">::</span><span class="nb">Sub</span><span class="o">&lt;</span><span class="n">Output</span><span class="o">=</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">+</span> <span class="nn">std</span><span class="p">::</span><span class="nn">fmt</span><span class="p">::</span><span class="n">Debug</span><span class="p">,</span>
      <span class="n">U</span><span class="p">:</span> <span class="nn">std</span><span class="p">::</span><span class="nn">fmt</span><span class="p">::</span><span class="n">Debug</span> <span class="p">{</span>
	<span class="nd">println!</span><span class="p">(</span><span class="s">"a memiliki: {:?}"</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
	<span class="nd">println!</span><span class="p">(</span><span class="s">"c memiliki: {:?}"</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
	<span class="n">a</span> <span class="o">-</span> <span class="n">b</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Untuk menambahkan constraint pada tipe lain, cukup dengan menambah koma saja di akhir <em>constraint</em> untuk satu tipe, bukan operator <code class="language-plaintext highlighter-rouge">+</code>.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="nf">fungsi_apalah</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="s">"Halo"</span><span class="p">);</span>
	<span class="nd">println!</span><span class="p">(</span><span class="s">"Hasilnya adalah: {}"</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Output dari <code class="language-plaintext highlighter-rouge">println!</code> kita sekarang akan berupa:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a memiliki: 10
c memiliki: "Halo"
Hasilnya adalah: -10
</code></pre></div></div>

<p>Sekarang, kita akan membuat sebuah trait baru dengan satu method bernama <code class="language-plaintext highlighter-rouge">TraitApalah</code>.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">trait</span> <span class="n">TraitApalah</span> <span class="p">{</span>
	<span class="k">fn</span> <span class="nf">apalah</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">a</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">String</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Nah, sekarang kita akan membuat dua fungsi baru.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="n">sesuatu</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">String</span> 
<span class="k">where</span> <span class="n">T</span><span class="p">:</span> <span class="n">TraitApalah</span> <span class="p">{</span>
	<span class="nd">println!</span><span class="p">(</span><span class="s">"{:?}"</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
	<span class="n">x</span><span class="nf">.apalah</span><span class="p">(</span><span class="s">"satu"</span><span class="p">,</span> <span class="s">"dua"</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">sesuatu2</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">dyn</span> <span class="n">TraitApalah</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
	<span class="nd">println!</span><span class="p">(</span><span class="s">"{:?}"</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
	<span class="n">x</span><span class="nf">.apalah</span><span class="p">(</span><span class="s">"satu"</span><span class="p">,</span> <span class="s">"dua"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Seperti yang kalian lihat, fungsi <code class="language-plaintext highlighter-rouge">sesuatu</code> merupakan fungsi generic dan <code class="language-plaintext highlighter-rouge">sesuatu2</code> tidak. Mungkin kalian berpikir untuk apa repot-repot menggunakan generic dan <em>constraint</em> pada fungsi <code class="language-plaintext highlighter-rouge">sesuatu</code>. Fungsi <code class="language-plaintext highlighter-rouge">sesuatu2</code> akan lebih simpel. Namun, kalian lihat, kedua fungsi tersebut memiliki error karena mereka memiliki <code class="language-plaintext highlighter-rouge">println!</code> namun tidak mengimplementasikan <code class="language-plaintext highlighter-rouge">Debug</code>. Akan ribet untuk memperbaiki itu pada fungsi <code class="language-plaintext highlighter-rouge">sesuatu2</code>, sedangkan pada fungsi <code class="language-plaintext highlighter-rouge">sesuatu</code>, kita hanya tinggal menambah <em>constraint</em> <code class="language-plaintext highlighter-rouge">Debug</code>.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="n">sesuatu</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">String</span> 
<span class="k">where</span> <span class="n">T</span><span class="p">:</span> <span class="n">TraitApalah</span> <span class="o">+</span> <span class="nn">std</span><span class="p">::</span><span class="nn">fmt</span><span class="p">::</span><span class="n">Debug</span> <span class="p">{</span>
	<span class="nd">println!</span><span class="p">(</span><span class="s">"{:?}"</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
	<span class="n">x</span><span class="nf">.apalah</span><span class="p">(</span><span class="s">"satu"</span><span class="p">,</span> <span class="s">"dua"</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">sesuatu2</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">dyn</span> <span class="n">TraitApalah</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
	<span class="nd">println!</span><span class="p">(</span><span class="s">"{:?}"</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
	<span class="n">x</span><span class="nf">.apalah</span><span class="p">(</span><span class="s">"satu"</span><span class="p">,</span> <span class="s">"dua"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Dan error pada fungsi <code class="language-plaintext highlighter-rouge">sesuatu</code> akan hilang.</p>

<p>Sekarang, hapus fungsi <code class="language-plaintext highlighter-rouge">sesuatu2</code> dan kita buat sebuah struct baru bernama <code class="language-plaintext highlighter-rouge">StructApalah</code>. Jangan lupa derive <code class="language-plaintext highlighter-rouge">Debug</code>.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">#[derive(Debug)]</span>
<span class="k">struct</span> <span class="n">StructApalah</span> <span class="p">{</span>
	<span class="n">sesuatu</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Lalu kita implement <code class="language-plaintext highlighter-rouge">TraitApalah</code> pada <code class="language-plaintext highlighter-rouge">StructApalah</code>.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">impl</span> <span class="n">TraitApalah</span> <span class="k">for</span> <span class="n">StructApalah</span> <span class="p">{</span>
	<span class="k">fn</span> <span class="nf">apalah</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">a</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
		<span class="k">self</span><span class="py">.sesuatu</span><span class="nf">.to_string</span><span class="p">()</span> <span class="o">+</span> <span class="s">"|"</span> <span class="o">+</span> <span class="n">a</span> <span class="o">+</span> <span class="s">"|"</span> <span class="o">+</span> <span class="n">b</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Lalu kita coba gunakan fungsi <code class="language-plaintext highlighter-rouge">sesuatu</code> pada <code class="language-plaintext highlighter-rouge">StructApalah</code>.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="n">StructApalah</span> <span class="p">{</span>
        <span class="n">sesuatu</span><span class="p">:</span> <span class="mi">100</span>
    <span class="p">};</span>

    <span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="nf">sesuatu</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">);</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Output yang akan keluar adalah:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>StructApalah <span class="o">{</span> sesuatu: 100 <span class="o">}</span>
100|satu|dua
</code></pre></div></div>

<p>Sekarang, mari kita coba untuk mengimplementasikan <code class="language-plaintext highlighter-rouge">TraitApalah</code> pada tipe primitif - yaitu <code class="language-plaintext highlighter-rouge">i32</code>. Benar, kita bisa melakukannya.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">impl</span> <span class="n">TraitApalah</span> <span class="k">for</span> <span class="nb">i32</span> <span class="p">{</span>
	<span class="k">fn</span> <span class="nf">apalah</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">a</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
		<span class="s">"i32"</span><span class="nf">.to_string</span><span class="p">()</span> <span class="o">+</span> <span class="s">"|"</span> <span class="o">+</span> <span class="n">a</span> <span class="o">+</span> <span class="s">"|"</span> <span class="o">+</span> <span class="n">b</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Lalu kita coba pakai di fungsi <code class="language-plaintext highlighter-rouge">main</code>.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="n">StructApalah</span> <span class="p">{</span>
        <span class="n">sesuatu</span><span class="p">:</span> <span class="mi">100</span>
    <span class="p">};</span>

    <span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="nf">sesuatu</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">);</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
    
    <span class="k">let</span> <span class="n">sebuahi32</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="nf">sesuatu</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sebuahi32</span><span class="p">);</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Kode akan berjalan dengan sempurna. Kita dapat menggunakan fungsi generic <code class="language-plaintext highlighter-rouge">sesuatu</code> pada kedua tipe berbeda tersebut karena mereka mengimplementasikan <code class="language-plaintext highlighter-rouge">TraitApalah</code> dan fungsi tersebut memiliki <em>constraint</em> <code class="language-plaintext highlighter-rouge">TraitApalah</code> juga.</p>

<p>Mungkin implementasi diatas terlihat aneh, namun saya ingin menunjukkan bahwa tipe itu sekarang agaknya tidak relevan dalam <em>generic programming</em> - trait-lah yang bermain peran besar. Itulah yang dimaksud dengan <em>trait-based generics</em>.</p>

<p>Sekarang, bersihkan lagi semua yang tadi kita tulis dan kita akan merombak ulang <code class="language-plaintext highlighter-rouge">StructApalah</code>. Kita akan mempelajari cara untuk menggunakan implementasi pada struct generic. Kita akan membuat sebuah <code class="language-plaintext highlighter-rouge">logger</code> sederhana sebagai contoh.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">StructApalah</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span><span class="n">U</span><span class="o">&gt;</span> <span class="p">{</span>
	<span class="n">a</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span>
	<span class="n">b</span><span class="p">:</span> <span class="n">U</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">StructApalah</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span><span class="n">U</span><span class="o">&gt;</span>
<span class="k">where</span> <span class="n">T</span><span class="p">:</span> <span class="nn">std</span><span class="p">::</span><span class="nn">fmt</span><span class="p">::</span><span class="n">Debug</span><span class="p">,</span>
      <span class="n">U</span><span class="p">:</span> <span class="nn">std</span><span class="p">::</span><span class="nn">fmt</span><span class="p">::</span><span class="n">Debug</span> <span class="p">{</span>
	<span class="k">fn</span> <span class="k">log</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span>
		<span class="nd">println!</span><span class="p">(</span><span class="s">"Logging! a: {:?} b: {:?}"</span><span class="p">,</span> <span class="k">self</span><span class="py">.a</span><span class="p">,</span> <span class="k">self</span><span class="py">.b</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Kita menggunakan <em>constraint</em> untuk generics pada struct untuk method pada implementasi - dengan <code class="language-plaintext highlighter-rouge">where</code> juga, seperti pada fungsi.</p>

<p>Mari kita buat sebuah variabel dari <code class="language-plaintext highlighter-rouge">StructApalah</code> dan kemudian kita gunakan method <code class="language-plaintext highlighter-rouge">log</code>. Selalu ingat bahwa <code class="language-plaintext highlighter-rouge">a</code> dan <code class="language-plaintext highlighter-rouge">b</code> dapat diisi dengan tipe apapun yang mengimplementasi <code class="language-plaintext highlighter-rouge">Debug</code>.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="n">StructApalah</span> <span class="p">{</span>
		<span class="n">a</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
		<span class="n">b</span><span class="p">:</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
	<span class="p">};</span>
	
	<span class="n">a</span><span class="nf">.log</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Dan kode diatas akan berjalan dengan sempurna dengan output seperti ini:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Logging! a: 20 b: <span class="o">[</span>0, 0, 0, 0]
</code></pre></div></div>

<p>Demikian akhir dari topik generics kita kali ini, terima kasih banyak sudah membaca, bila ada pertanyaan, silahkan kirim email ke rahmanhakim2435@pm.me :).</p>
:ET